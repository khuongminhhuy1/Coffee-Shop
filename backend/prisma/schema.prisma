// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  DELIVERING
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id  @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  avatar   String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token       Token[]
  userInformation UserInformation[]
  refreshToken RefreshToken[]
  cart Cart[]
  orders Orders[]
  @@map("users")
}
model Token{
  id        String    @id @default(cuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String   
  token     String    
  expiresAt DateTime

  @@map("tokens")
}

model UserInformation {
  id        String  @id  @default(cuid())
  userId    String      @unique
  address   String
  city      String
  state     String
  zipCode   String
  phone     String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}
model RefreshToken {
  id         String   @id @default(uuid()) // Unique ID
  token      String   @unique              // The refresh token itself
  userId     String   @unique              // Link to User model
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime // Expiry date for the token
  createdAt  DateTime @default(now()) // When the token was created

  @@map("refresh_tokens")
}
model Category {
  id        Int @id @default(autoincrement())
  name      String @unique
  total     Int @default(0)
  createdAt DateTime @default(now())
  products  Product[]

  @@map("categories")
}

model Product {
  id          String @id @default(uuid())
  name        String @unique
  categories  Category[]
  price       Float
  description String?
  images      Image[]
  cart        Cart[]
  order       Orders[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model Image {
  id        String @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("images")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("carts")
}

model Orders {
  id            Int         @id @default(autoincrement())
  userId        String
  productId     String
  orderNumber   String        @unique
  quantity      Int
  totalAmount   Float
  status        OrderStatus  @default(PENDING)
  paymentMethod String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  User          User         @relation(fields: [userId], references: [id])  
  Product   Product  @relation(fields: [productId], references: [id])
  
  @@index([userId])
  @@map("orders")
}